<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C/C++ | Sean Mountcastle]]></title>
  <link href="http://sean.github.com/blog/categories/c-c-/atom.xml" rel="self"/>
  <link href="http://sean.github.com/"/>
  <updated>2012-08-17T11:10:27-04:00</updated>
  <id>http://sean.github.com/</id>
  <author>
    <name><![CDATA[Sean Mountcastle]]></name>
    <email><![CDATA[smountcastle@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Performance Tuning Network Applications]]></title>
    <link href="http://sean.github.com/blog/2008/03/20/performance-tuning-network-applications/"/>
    <updated>2008-03-20T23:09:57-04:00</updated>
    <id>http://sean.github.com/blog/2008/03/20/performance-tuning-network-applications</id>
    <content type="html"><![CDATA[<p>Recently at work I spent a few weeks tuning a network service across
three platforms (Solaris, Linux, and AIX) to get within 10% of the
theoretical maximum throughput. In this short article, I'll walk through
the various tools I used to improve the performance of the application.</p>

<p>This application is very specialized in that the two machines are
connected directly through an ethernet switch. This means that the MTU
could easily be determined from each end of the link and the extra work
to determine the maximum segment size for the transit network (see <a href="http://tools.ietf.org/html/rfc1191">RFC
1191</a>) was unnecessary. This also
made it very easy to watch the traffic between the two hosts as well as
the system calls they were using to transfer and receive the data.</p>

<p>Before I get into the steps I took to tune the service, I'd like to
introduce the tools used:</p>

<ul>
<li>Truss: a tracing utility which displays system calls, dynamically
loaded user level function calls, received signals, and incurred
machine faults. This is available for many platforms, but I use it
most on AIX.</li>
<li>DTrace/DTruss: a dynamic tracing compiler and tracing utility. This
is an amazingly powerful tool from Sun, originally for Solaris but
slowly spreading to other platforms. See Sun's <a href="http://www.sun.com/software/solaris/howtoguides/dtracehowto.jsp">How To
Guide</a>.</li>
<li>strace: a dynamic tracing utility which displays systems calls and
received signals under Linux.</li>
<li>mpstat: collects and displays performance statistics for all logical
CPUs in the system.</li>
<li>prstat: iteratively examines all active processes on the system and
reports statistics based on the selected output mode and sort order.</li>
<li>tcpdump: a utility for capturing network traffic.</li>
<li>Wireshark: a network protocol analyzer. It replaces the venerable
Ethereal tool and allows you to either capture network traffic on
demand or load a captured session for analysis. Find out more
<a href="http://www.wireshark.org">here</a>.</li>
<li>gprof: a tool for profiling your code to determine where the
performance bottle-necks are. See the
<a href="http://www.gnu.org/software/binutils/manual/gprof-2.9.1/html_mono/gprof.html">manual</a>
for more information.</li>
<li>c++filt: a tool for demangling C++ method names. It is part of the
<a href="http://directory.fsf.org/project/binutils/">GNU binutils package</a>.</li>
</ul>


<p>Since I already had the service up and running, I simply ran the two
components and captured the traffic between them using tcpdump. While
the processes were running, I also used dtruss, truss, or strace
(depending on the platform) to capture the system calls being made.
Since this is a network service, I focused on calls to <code>select</code>, <code>send</code>,
and <code>recv</code>.</p>

<pre><code>13455/15:   2143177    2994      4 pollsys(0xFFFFFD7EBADDB910, 0x1, 0xFFFFFD7EBADDBA30) = 1 0
13455/15:   2143180       5      0 pollsys(0xFFFFFD7EBADDB8D0, 0x1, 0xFFFFFD7EBADDB9F0) = 1 0
13455/15:   2143185       8      4 recvfrom(0x11, 0xB384A0, 0x10000)                    = 1416 0
13455/15:   2143253       5      0 pollsys(0xFFFFFD7EBADDB8D0, 0x1, 0xFFFFFD7EBADDB9F0) = 0 0
13455/15:   2143262      12      8 send(0x11, 0xB084D0, 0x14B8)                         = 5304 0
13455/15:   2143268     365      4 pollsys(0xFFFFFD7EBADDB910, 0x1, 0xFFFFFD7EBADDBA30) = 1 0
13455/15:   2143270       4      0 pollsys(0xFFFFFD7EBADDB8D0, 0x1, 0xFFFFFD7EBADDB9F0) = 1 0
13455/15:   2143275       8      4 recvfrom(0x11, 0xB384A0, 0x10000)                    = 1416 0
13455/15:   2143343       5      0 pollsys(0xFFFFFD7EBADDB8D0, 0x1, 0xFFFFFD7EBADDB9F0) = 0 0
13455/15:   2143348       9      4 send(0x11, 0xB084D0, 0x14B8)                         = 5304 0
13455/15:   2143353    1000      4 pollsys(0xFFFFFD7EBADDB910, 0x1, 0xFFFFFD7EBADDBA30) = 1 0
</code></pre>

<p>Looking at the results above you can see that <code>select</code> (<code>pollsys</code>) is
being called each time we need to send or receive data over the network.
Since the socket is non-blocking we can rely on the immediate return
when the outgoing socket buffer is full as well as when there is no data
available to read. By <code>select</code>ing at the very top of the receive loop we
can bundle multiple receive calls together, increasing the application's
throughput. Now the output looks like this:</p>

<pre><code>16712/9:     16202    1560      6 pollsys(0xFFFFFD7EBB9DB940, 0x1, 0xFFFFFD7EBB9DBA30) = 1 0
16712/9:     16217      10      6 recv(0xB, 0x8A6450, 0x10000)                         = 1416 0
16712/9:     16246       9      5 send(0xB, 0x876480, 0x540)                           = 1344 0
16712/9:     16267       7      3 send(0xB, 0x876480, 0x540)                           = 1344 0
16712/9:     16285       5      1 send(0xB, 0x876480, 0x540)                           = 1344 0
16712/9:     16680      10      5 recv(0xB, 0x8A6450, 0x10000)                         = 1416 0
16712/9:     16712      11      7 send(0xB, 0x876480, 0x540)                           = 1344 0
16712/9:     16733       7      3 send(0xB, 0x876480, 0x540)                           = 1344 0
16712/9:     16753       6      2 send(0xB, 0x876480, 0x540)                           = 1344 0
16712/9:     16768       4      0 recv(0xB, 0x8A6450, 0x10000)                         = -1 Err#11
</code></pre>

<p>You'll notice that now we are able to process two requests and send out
six responses in the time that it previously took to call select and
receive a single request. When there is nothing left to read, the call
to <code>recv</code> returns errno 11 (<code>EAGAIN</code>). This change made the single
biggest performance impact on the code. I also changed the calls
<code>recvfrom</code> to <code>recv</code> since the application did not make use of the
foreign address.</p>

<p>At this point the performance was much better but I noticed that under
heavy load the sending socket would block as the ratio of requests to
responses was 1:3. As this was a UDP application, having the sending
buffers fill up seemed strange as we assumed that additional packets
would simply be dropped on the floor.</p>

<p>On the server, I checked the UDP socket buffer size using <code>ndd</code> (this
was under Solaris. For AIX the command is <code>no</code> and for Linux the command
is <code>sysctl</code>).</p>

<p>The following code was added to the socket initialize (minus the error
handling) to ensure that the socket buffers were large enough.</p>

<pre><code>unsigned size = 1024 * 1024; // 1MB
int ret = setsockopt(desc, SOL_SOCKET, SO_SNDBUF, &amp;size, sizeof(size));
    ret = setsockopt(desc, SOL_SOCKET, SO_RCVBUF, &amp;size, sizeof(size));
</code></pre>

<p>Now that the application was performing acceptably I decided to run it
under the profiler. This turned up the function which was adding
responses to the in-memory packet. It turned out that as responses were
being added to the packet, the headers were being recalculated each
time. I removed this unnecessary work and only made the calculations
right before the packet was sent. This improved performance a few
percentage points more.</p>

<p>By binding the network interrupts to a particular core and keeping the
sending thread off of that core we were able to eek out additional
performance from the application. To accomplish this, the application
allows the operator to specify which core(s) it should bind to using
<code>sched_setaffinity</code> (Linux) and <code>processor_bind</code> (Solaris). You can also
accomplish this using <code>taskset</code> (Linux) and pbind (Solaris) if you don't
wish to modify your application.</p>

<p>Looking at the network traffic with tcpdump, I saw that I could fit an
additional response in the response bundle packet if I reduced or
removed some of the items in the packet header. At this point the
analysis and tuning had gone on for a few weeks and we had a schedule to
meet. Since the performance was where we needed it, the application was
wrapped up and sent to quality assurance.</p>

<p>The single most important lesson I learned from this exercise was to use
non-blocking sockets to their fullest by continually calling
<code>recv</code>/<code>send</code> until the call would block and then using <code>select</code> to idle
the process until there is work to do.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NSCoderNight DC]]></title>
    <link href="http://sean.github.com/blog/2008/01/15/nscodernight-dc/"/>
    <updated>2008-01-15T23:05:57-05:00</updated>
    <id>http://sean.github.com/blog/2008/01/15/nscodernight-dc</id>
    <content type="html"><![CDATA[<p>Tonight I was able to attend <a href="http://nscodernight.com/?cat=6">NSCoderNight
DC</a> in Tysons Corner, VA and finally met
<a href="http://greenmango.org/">Jose Vazquez</a> in person. Unfortunately, turn
out is pretty spotty, with Jose being the only continuous attendee.
Despite it being just the two of us, I came away energized and started
playing around with the new APIs we spoke about: <a href="http://developer.apple.com/documentation/MusicAudio/Conceptual/CoreAudioOverview/Introduction/chapter_1_section_1.html#//apple_ref/doc/uid/TP40003577-CH1-SW1">Core
Audio</a>/<a href="http://developer.apple.com/documentation/MusicAudio/Conceptual/AudioQueueProgrammingGuide/Introduction/chapter_1_section_1.html#//apple_ref/doc/uid/TP40005343-CH1-SW1">AudioQueues</a>
and <a href="http://developer.apple.com/graphicsimaging/quartzcomposer/">Quartz
Composer</a>.</p>

<p>I was shocked when Jose explained that the Core Audio and AudioQueues
tools are all Carbon (i.e. plain C) instead of Cocoa. Mistakenly, I was
under the impression that Carbon had been officially deprecated by Apple
and that only Cocoa would be supported going forward. The
AudioQueueTools
(/Developer/Examples/CoreAudio/SimpleSDK/AudioQueueTools) example which
comes with the Apple Developer Tools shows how to create command-line
tools for recording and playing back sounds, but trying to integrate
this with you Cocoa application is a different story. Luckily, we found
this post on Mark Darlymple's blog which explains how to use <a href="http://borkwarellc.wordpress.com/2007/09/13/c-callbacks-in-objc/">C
callbacks in
Objective-C</a>.
I'm still playing around with this and also looking at the
<a href="http://developer.apple.com/quicktime/">QuickTime</a> API support for
recording sound.</p>

<p>Quartz Composer is an amazingly cool app, that appears deceptively
simply to throw something together with. I was blown away by Jose's demo
of it, having never seen it before. The visual programming environment,
<a href="http://developer.apple.com/graphicsimaging/quartz/quartzcomposer.html">Quartz Composer
Editor</a>,
has a fairly straight-forward GUI and allows you to easily 'compose'
multiple processing units (a.k.a. patches) together into composition
while the view window displays what the composition will look like in
real-time. I'm definitely going to spend some time to go through the
examples (/Developer/Examples/Quartz Composer/Applications).</p>

<p>If you are free on a Tuesday night, be sure to stop by the <a href="http://maps.google.com/maps?f=q&amp;hl=en&amp;geocode=&amp;time=&amp;date=&amp;ttype=&amp;q=8365+Leesburg+Pike,+Vienna,+VA+22182+(Panera+Bread">Tysons
Corner
Panera</a>&amp;sll=38.878131,-77.278595&amp;sspn=0.009689,0.0156&amp;ie=UTF8&amp;om=1&amp;ll=38.931038,-77.230368&amp;spn=0.043267,0.079479&amp;z=14&amp;iwloc=addr&amp;source=embed)
from 7pm-9pm. I'm going to make every effort to attend regularly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Protecting Your Ruby Source Code for End User Applications]]></title>
    <link href="http://sean.github.com/blog/2007/12/15/protecting-your-ruby-source-code-for-end-user-applications/"/>
    <updated>2007-12-15T17:54:41-05:00</updated>
    <id>http://sean.github.com/blog/2007/12/15/protecting-your-ruby-source-code-for-end-user-applications</id>
    <content type="html"><![CDATA[<p>If you want to distribute your Ruby applications while still protecting
your intellectual property you could use an obfuscation tools such as
<a href="http://blog.zenspider.com/archives/2006/07/zenobfuscate_no.html">ZenObfuscate</a>
or try to write your own. But in this article, I'm going to show a
different approach that's been used by several different companies
producing commercial products written in Ruby. The method is not
specific to Ruby and should work for any interpreted language in which
you need to distribute your source code with the application.</p>

<p>The secret is to encrypt your Ruby source, store it in a database and
then modify the Ruby interpreter to look for your code in the database
and decrypt it on the fly. I should note that there is no way to
completely protect a product which is distributed to your
customers--with enough diligence any security measures can be broken.</p>

<p>These instructions are for Unix operating systems (include MacOS X).
Unfortunately (or fortunately, for me), I don't own a Windows machine.</p>

<p>If you don't already have Berkeley DB (BDB) installed on your system you
can download it
<a href="http://www.oracle.com/technology/software/products/berkeley-db/index.html">here</a>.
You will need to follow the instructions which come with BDB which
explain how to build and install it. Originally, I was going to use
<a href="http://openssl.org/">OpenSSL</a> to encrypt our Ruby source code before
inserting it into the database and decrypt it after retrieving it from
the database. Thankfully, the latest version of BDB includes
<a href="http://en.wikipedia.org/wiki/Advanced_Encryption_Standard">AES</a> support
which allows you to maintain an encrypted database very easily.</p>

<p>You will also need to obtain a fresh copy of the <a href="http://www.ruby-lang.org/en">Ruby source
code</a> so that we can build our own private
version which knows how to pull classes out of our BDB instance. So
let's start by creating a directory for us to work in:</p>

<pre><code>mkdir -p ~/RubyProject/deploy
</code></pre>

<p>You should unpack the Ruby source in the <em>\~/RubyProject</em> directory
(this should create directory which looks like
<em>\~/RubyProject/ruby-1.8.6-p111</em>). Go into that directory and run the
configure script as follows:</p>

<pre><code>./configure --prefix=~/RubyProject/deploy --with-static-linked-ext
</code></pre>

<p>This will enable us to build a stand alone Ruby interpreter which has
everything it needs statically linked in.</p>

<p>To find out where we need to hook in our handler which loads missing
classes from the database, you can <em>grep</em> through the source code
looking for const_missing like this:</p>

<pre><code>grep const_missing *.c
</code></pre>

<p>This turned up two files <em>object.c</em> and <em>variable.c</em>. Looking at the
output, I could see that the <strong><em>const_missing</em></strong> function is actually
defined in <em>variable.c</em>. Jumping in, I searched for the code executed
when a constant cannot be found. This led me to the
<strong><em>rb_const_get_0</em></strong> function which walks up the class hierarchy
looking for the specified constant. If it cannot be found, it returns
the result of the <strong><em>const_missing</em></strong> function. So right before that
final return, I added the following hook:</p>

<pre><code>    /* At this point we haven't found the class so we must look
       inside of the BerkeleyDB for it, see dbloader.c */
    value = load_from_db(id);
    if (value != Qundef) return value;
</code></pre>

<p>Now I just had to implement the load_from_db function which should
look inside of the encrypted BDB instance for the file. Looking at how
the <strong><em>rb_const_get_0</em></strong> function works, I knew my new method had to
return a Ruby <em>VALUE</em>:</p>

<pre><code>VALUE
load_from_db(id)
     ID id;
{
    DBT k;
    DBT d;

    memset(&amp;k, 0, sizeof(DBT));
    memset(&amp;d, 0, sizeof(DBT));

    verify_database_state();

    k.data = rb_id2name(id);
    k.size = strlen(k.data);

    d.flags = DB_DBT_MALLOC;

    if (bdb-&gt;get(bdb, NULL, &amp;k, &amp;d, 0) == 0) {
      rb_eval_string((const char *)d.data);
      free(d.data);
      return rb_eval_string(rb_id2name(id));
    }
    return Qundef;
}
</code></pre>

<p>You'll note that if we find the class in the database, we first evaluate
it using <strong><em>rb_eval_string</em></strong>. Since this returns <em>nil</em>, we need
evaluate the class name so that we can pass back a Ruby <em>VALUE</em>. If the
class doesn't exist in the database, we return <em>Qundef</em> and
<strong><em>const_missing</em></strong> gets called as usual.</p>

<p>The <strong><em>verify_database_state</em></strong> function ensures that the password for
the BDB instance was passed and the database opened so that the
<strong><em>get</em></strong> call can access it. It is implemented like so:</p>

<pre><code>/* a simple way to obfuscate the password in memory */
#define A(c)             (c) - 0x1d
#define ENCRYPT_PWD(str) do { char * p = str; while (*p) *p++ -= 0x1d; } while (0)
#define DECRYPT_PWD(str) do { char * p = str; while (*p) *p++ += 0x1d; } while (0)

static void
verify_database_state()
{
  /* don't forget to NULL terminate this array! */
  static char info[] =
    { A('1'), A('2'), A('3'), A('4'), A('5'),
       A('6'), A('7'), A('8'), A('9'), A('0'),
       0 };

  const char * database_file = "data.db";

  if (bdb == NULL) {
    db_env_create(&amp;bdbenv, 0);
    db_create(&amp;bdb, bdbenv, 0);

    DECRYPT_PWD(info);
    bdbenv-&gt;set_encrypt(bdbenv, info, DB_ENCRYPT_AES);
    ENCRYPT_PWD(info);
    bdbenv-&gt;open(bdbenv, ".", DB_INIT_MPOOL | DB_CREATE | DB_PRIVATE, 0600);
    bdb-&gt;set_flags(bdb, DB_ENCRYPT);
    bdb-&gt;open(bdb, NULL, database_file, NULL, DB_BTREE, 0, 0644);
  }
}
</code></pre>

<p>You'll notice that the password is hard coded into the binary along with
the location of the BDB instance. If you are going use this code, you'll
want to change the default password (which needs to match the password
you used when storing your Ruby source in the database) and perhaps the
location of the database. To deter those looking to decrypt our Ruby
source, I've written C macros which performs a transformation on the
password. It is fairly simple to circumvent, so you should research
other methods of securely storing passwords within applications.</p>

<p>Finally, you'll need to remember to close the BDB instance before the
Ruby interpreter exits. To do this we simply open up <em>main.c</em> and add
the following line immediately following the call to <strong><em>ruby_run</em></strong>:</p>

<pre><code>close_database();
</code></pre>

<p>The implementation of <strong><em>close_database</em></strong> is trivial, so you can just
look in the patch I've provided for it.</p>

<p>The patch to the Ruby source code is included in <a href="http://seanmountcastle.com/wp-content/uploads/2007/12/ruby-load-db.zip">this zipped
attachment</a>
along with another utility I wrote to load all of your Ruby source into
the encrypted BDB instance (along with its Makefile). Here is a
transcript which shows how to use the tools and your new Ruby
interpreter:</p>

<pre><code>~RubyProject/tools&gt; ./rb_store data.db *.rb
Enter database password:
Stored Example (131) bytes

~RubyProject/tools&gt; ./rb_load data.db
Enter database password:
Hit CTRL+C to quit.
Enter a class name: Example
Found: 

class Example
  def initialize
    puts "Hello from the Example class"
  end

  def aMethod
    puts "Called aMethod"
  end
end

Enter a class name: Foo
No such class
Enter a class name: ^C

~RubyProject/ruby-1.8.6-p111&gt; ./ruby -e "e = Example.new"
Hello from the Example class

~RubyProject/ruby-1.8.6-p111&gt; ./ruby -e "f = Foo.new"
-e:1: uninitialized constant Foo (NameError)
</code></pre>

<p>This implementation doesn't deal with multiple classes of the same name
residing in different directories. Also, the way in which the <em>rb_load</em>
tool determines the name of the class is rather naive and can screw it
up. I've wanted to write this for over a year now after hearing <a href="http://richkilmer.blogs.com/">Rich
Kilmer</a> talk about the way in which
<a href="http://infoether.com/">InfoEther</a> distributes its Ruby applications. So
this is more of a proof-of-concept for myself than anything else.
Hopefully you learned from this tutorial and can put it to good use.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TopCoder Single Round Match]]></title>
    <link href="http://sean.github.com/blog/2006/12/20/topcoder-single-round-match/"/>
    <updated>2006-12-20T23:04:04-05:00</updated>
    <id>http://sean.github.com/blog/2006/12/20/topcoder-single-round-match</id>
    <content type="html"><![CDATA[<p>Last night I participated in a "code fest" sponsored by my employer. It
was great fun and the code fest was powered by
<a href="http://www.topcoder.com">TopCoder</a>. This was my first time
participating in any sort of coding competition and while I didn't make
the top three, I did place in the top ten. I'm definitely looking
forward to the next company sponsored event in February. For those of
you not familiar with TopCoder, they basically provide a Java
application/applet called the Competition Arena. Once you login to the
arena, you can then register for a Single Round Match (SRM, in TopCoder
parlance), but only during the registration window (which appears to be
two hours prior to the event). Once the event begins you have 75 minutes
to solve problems of increasing difficulty. Each problem set is assigned
a certain number of points (usually 250, 500 and 1000). You are judged
both on the correctness of your program as well as the time it took you
to develop and test it. Since you must develop, compile and test your
code in TopCoder's arena Java app you can only write your solution in
C++, Java, C#, or VisualBasic. I wish they offered Ruby as an option
(or even Python), but at this time you're stuck with those four choices.
You are allowed to choose your programming language at the problem set
level (i.e. you don't need to stick with the same language for all
three). Since the majority of my experience in the past ten years has
been with Java I selected that for all three of the problem sets. In
retrospect, I might've fared better had I chosen C++ as that is what
I've been using almost exclusively at work these past three months. I
also need to manage my time better as I ran out of time just before I
was going to submit my solution to the 1000 point problem--I believe
that had I finished in time, I would've placed in the top three (I guess
we'll see when I participate in February). Once the content ends, you're
able to look at the solutions from the other participants and can
challenge their solutions if you believe you've found a bug. If your
challenge succeeds, you earn points and the person challenged loses all
of the points for that problem, but if your challenge fails, you'll lose
points and the person challenged will gain points. There were a few
successful and unsuccessful challenges during the competition. Looking
through people's code it was clear that the folks who had participated
previously didn't bother indenting their code properly or ensuring it
was clear--they focused on getting it working in the shortest time
possible. I made the newbie mistake of properly indenting my code and
even writing psudocode comments as an outline prior to writing the real
code (next time I'll do this on paper if necessary). I also was hampered
slightly by the Arena editor as it uses the MS Windows keybindings even
on the Mac! Thus CTRL+C is copy instead of CMD+C -- I kept hitting the
Apple shortcuts instead of their Windows counterparts and this slowed me
down as well. My colleague suggested just keeping Emacs open and copy
and paste as necessary into the Arena editor. Unfortunately, I cannot
post the problem sets here as they are copyrighted by TopCoder and you
must have permission to republish them. But if you go to the TopCoder
site, you can see many example problems. If you're interested in
petitioning TopCoder to offer Ruby as an alternative language for
competitions, I urge you to <a href="mailto:service@topcoder.com">email them</a>,
as I have. <strong>Update 2006-12-21</strong>: I received the following response from
TopCoder and have asked them to add Ruby as an option for "Marathon
Matches"</p>

<blockquote><p>We do not allow interpreted languages like Python or Ruby in our
algorithm events because their execution speeds makes them
non-competitive compared to the other languages.Â We revisit this from
time to time, but our tests have shown that the execution speed makes
writing problems that keep all languages on the same approximate
playing field impossible. We do offer Python as a fully supported
language choice in our Marathon Match events, where we can relax the
constraints because of the non time-critical nature of the event.Â You
can find more information about Marathon events on our web site under
â€œMarathon Matchesâ€?</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interviewing at EA Mythic]]></title>
    <link href="http://sean.github.com/blog/2006/12/10/interviewing-at-ea-mythic/"/>
    <updated>2006-12-10T23:11:19-05:00</updated>
    <id>http://sean.github.com/blog/2006/12/10/interviewing-at-ea-mythic</id>
    <content type="html"><![CDATA[<p>Ever since I started playing video games at an early age, I always
wanted to develop them. I had my first taste of this in grade school
when I figured out how to modify some of my favorite games by editing
the data files in a hex editor. In high school, I bought myself a copy
of Borland Turbo Pascal (and then later Turbo C++) and taught myself how
to program--building rudimentary games. For college, my mother really
wanted me to become a lawyer so I decided that the best way to get there
was to major in political science. While I did well, I just wasn't
really interested in it. So in my junior year I changed my major to
computer science. Of course, I had already chosen my university based on
their reputation for political science and law and as such the computer
science curriculum wasn't the best. Since freshman year I had been
running a <a href="http://en.wikipedia.org/wiki/MUD">MUD</a> (I had to finagle an
account on the engineering Ultrix machines as I wasn't in the School of
Engineering--we also weren't supposed to be running servers either but I
had some crafty ways to hide my work from the TAs). In my junior year I
built a raycasting engine and a simple FPS (similar to <a href="http://en.wikipedia.org/wiki/Wolfenstein_3D">Wolfenstein
3D</a>). While I continued to
follow the game industry and read-up on the newest techniques from folks
like Michael Abrash, John Carmack, Andre LaMothe, etc. my foray into
game development was still-born. In my senior year I took an internship
at the Naval Research Lab and was pigeon-holed into telecommunications
from that point on (I believe I've finally escaped, though I'm currently
working on some very interesting and vital Internet infrastructure).
Anyway, you didn't come here to read about me and my failed attempts at
game development, you want to know about interviewing at EA's Mythic
Studio in Fairfax, VA. Home to Dark Age of Camelot (DAoC) and the
upcoming Warhammer Online: Age of Reckoning (WAR). Back in July, I
contacted my friend Scott who works at <a href="http://www.bluefang.com/">Blue Fang
Games</a> in Waltham, MA to find out if he knew
anyone at <a href="http://www.mythicentertainment.com/">Mythic Entertainment</a>.
Fortunately he did, his friend Ralph, an artist at Mythic, was able to
put me in touch with the CTO, Matt. At this time they were still in
transition due to the acquisition of Mythic by Electronic Arts so Matt's
email address changed and communication was difficult. I continued to
persevere until Matt agreed to bring me in for an interview at the end
of August. It was an all day interview (from 10am until 5pm), which I
was glad for--I really dislike it when companies only speak to you for
an hour or two; it's just not enough time to assess someone. Knowing the
culture at the company I didn't wear a suit and tie to my interview, but
khaki pants and a button-down shirt thinking that I should at least
dress somewhat nicely to the interview (even this elicited a mixed
response, which I'll speak about later). When I arrived at Mythic, Matt
(the CTO) came out to greet me and spoke with me for a short while about
why I wanted to become a game developer, my professional experience and
skills. He then walked me over to speak with Darren who is essentially
the director of operations for Mythic, managing their datacenters and
ensuring that the hardware and network are operating. One of his direct
reports, Andrew, was in his office so they decided to tag-team interview
me--which I didn't mind. Darren explained his role, the machines in
their co-lo out in Ashburn and their pipe to the internet. Andrew
quizzed me about various programming languages and had me explain my
most recent project at Cisco. I brought up Ruby and tried to make a case
for it increasing their productivity in operations through the use of
scripts and custom web apps to help manage and monitor their systems.
Andrew was already using Python and had done some of this already
(though not to the extent I had envisioned) and didn't see the need to
learn yet another programming language. Granted Python and Ruby are
equivalent enough that one or the other is suitable for these type of
scripts/apps. Matt had thought that the best fit for me would be here in
the operations group since I did not have any professional game
development experience. Next I met with Ed who works on the WAR game
server. He explained that one of his biggest problems was NPC
path-finding and that they were evaluating a new library from a company
in Europe (France, I think). But even that wouldn't scale to the number
of NPCs they have in a shard. He showed me the 'tools' they used to
design spells and NPC behavior--basically an Excel spreadsheet that the
game designers fill in that gets imported into the game server. I left
with some ideas on how to improve these tools quite a bit (using a DSL
written in Ruby that would be easy for the designers to write spells and
behaviors in or a Rails app which used Script.aculo.us for drag-and-drop
building of spells/NPC behavior from basic building blocks). Following
my meeting with Ed, the team took me out to lunch where I made a pretty
big mistake--instead of talking about games the whole time, I admitted
that I had to pack-up my PS2 over a year ago because my toddler kept
grabbing at the cords and opening the game cases. One good thing that
did come out of lunch is that I learned about <a href="http://www.adultswim.com/shows/venturebros/">The Venture
Bros.</a>, the best cartoon on
TV. I think it's absolutely hilarious and I've been recommending it to
all of my friends ever since. When I got back to the office, they
introduced me to Brian who also worked on the WAR game server. I had a
great conversation with him and liked him quite a bit. He has been
working at Mythic (or Interworld Productions as it was known at the
time) since their first MUD, Dragon's Gate. What I found interesting
about Brian was that he had been working there since high school and had
no formal computer science background (though he said he was working on
his degree at GMU). An interesting tidbit that I learned from Brian is
that for all of the games Mythic has released, the server-side codebase
is derived from Dragon's Gate--they just keep adding functionality to it
over the years and try to patch over the brittle parts. After speaking
with both Ed and Brian, I was very excited about working on the WAR game
server and thought this was the group I could quickly contribute to.
Next they had me speak to another developer named Matt (not the CTO). At
first, I had mistakenly though he was in the operations group working
with Andrew and Darren. Matt works on the game server for DAoC which
appears to be in a sustaining mode. Following the interview, I was still
not clear on what work needed to be done on DAoC. I think this was one
of my worst interviews at the company as there seemed to be a lack of
understanding between us--the questions he was asking me were not at all
clear (perhaps that was the point), so I tried my best to tease more
information out of him and answer them to the best of my ability. As
sort of an afterthought they had me speak to Marty, another game server
developer on DAoC who said his background was on the client side (3D
Windows application programming). He was the most hostile towards me and
also the most frank. He was appalled by the fact that I had packed up my
PS2 to prevent my children from breaking it--he explained that if he
were in that position he would tell his wife to take the kids away so he
could play (the way he said this made me feel sorry for his family).
According to Marty they are only looking for folks who've worked in the
game industry before or are hard-core gamers (at the expense of all
else, he recounted the personal sacrafices he made to get into
Mythic--essentially commuting up to Northern VA on Monday, staying for
the week and commuting back to his family for the weekend). His
rationale for preferring hard-core gamers was reasonable--he explained
that in design meetings they typically referred to other games and this
shared knowledge of the details of games (through having played them)
allowed the team to come to consensus much sooner. He used <a href="http://www.elderscrolls.com/games/oblivion_overview.htm">Elder
Scrolls
Oblivion</a> as an
example, but couldn't remember the name of the game (which I had to
remind him of). So while I stay up-to-date on the latest games, actually
having played them helps to build this shared gaming culture. Marty also
thought that I was way over-dressed for the interview (in khaki pants
and a button down shirt), he was wearing a t-shirt and shorts and I
thought I should've worn something more casual. I tried to explain to
him that this was a job interview and that I wanted to make a good
impression but it had the reverse effect on him. Finally I had a sort of
exit interview with Matt (the CTO) who asked for my impression of the
team and the company (which was good) and he gave me a tour of the area
surrounding the art team for WAR. The art on the walls there is simply
amazing and having been a huge fan of Warhammer it was a real treat. At
this time he also explained to me why <a href="http://en.wikipedia.org/wiki/Mythic_Entertainment#Presently">Imperator
Online</a> was
cancelled--it just wasn't fun for them when they played through it.
MMO's with guns are really hard to balance and after many months of
development the game just wasn't coming together. Matt also confirmed
that WAR would be released on both the PC and the Xbox 360 (the latter
of which he recommended I get, instead of the PS3 or Wii). Matt was most
concerned about my salary at Cisco, constantly assuring me that they
would be unable to me it. I explained that I was willing to take a bit
of a pay cut for the opportunity to work as a game developer on
Warhammer. I left with mixed feelings, not sure whether I would be
offered a position at Mythic. I was quite surprised that I wasn't given
any form of coding test. Following Labor Day weekend, I heard back from
Matt that they decided not to offer me a position, here's the content of
his email:</p>

<blockquote><p>After a lot of consideration, we don't think it is a good fit for you
here at Mythic. You obviously are very talented at what you do, with
our limited position slots available here; we would like to fill them
with individuals with game job experience if possible. Take care, we
wish you the best with your future endeavors.</p></blockquote>

<p>Having gone through this experience and done quite a bit of research,
I've come up with the following tips for interviewing at EA Mythic, or
any game developer:</p>

<ul>
<li>If you don't have any game industry experience, create your own by
making your own game. Go through the entire process and complete
it--don't show off a half finished game.</li>
<li>If you're not a rabid gamer, become one. At lunch talk about your
favorite games, why they are your favorites, what new games you're
looking forward to, etc. Here they're looking for passion. The
thought is if your passionate about games, your passion will show in
your work (and you'll be willing to work 80-100 hours during crunch
time, the two or so months prior to release).</li>
<li>Don't try to push any new technology or programming language during
your interview. Once you've gotten the job you can then try to
effect change. Instead show how your skills can work within the
existing situation to improve it. This is true of basically any
job--it's naive to think that you know better than they do after
having worked in the domain for so long. Though the game industry in
particular appears to be quite insular and has only recently started
switching to tools, processes and procedures that have been shown to
work well in software development projects.</li>
<li>Provide specific examples of how you can contribute to the team. You
need to sell yourself to them.</li>
<li>Research the company and culture as much as possible prior to the
interview. I did quite a bit of research about Mythic before
interviewing and knew a lot about the founders and the products, but
I didn't know that much about the culture. I should've used Ralph
(my friend's friend) to find out more prior to my interview.</li>
<li>And, of course, they're looking to see that you can communicate with
them and that you're not a total jack-ass. Remember, we're dealing
with real people, treat them the way you wish to be treated. Even
though Marty was rather hostile to me during my interview, I still
treated him with respect and answered his questions honestly. Having
hobbies you can talk about in a lunch setting may also be good, but
the lives of the guys I spoke to seemed to revolve around games and
television (not really what I'd consider hobbies).</li>
</ul>


<p>If you have any additional tips/tricks for landing a job as a game
developer, please post them in the comments.</p>
]]></content>
  </entry>
  
</feed>
