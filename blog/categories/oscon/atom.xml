<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: OSCON | Sean Mountcastle]]></title>
  <link href="http://sean.github.com/blog/categories/oscon/atom.xml" rel="self"/>
  <link href="http://sean.github.com/"/>
  <updated>2012-08-16T00:16:28-04:00</updated>
  <id>http://sean.github.com/</id>
  <author>
    <name><![CDATA[Sean Mountcastle]]></name>
    <email><![CDATA[smountcastle@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OSCON 2006 Wrap-up]]></title>
    <link href="http://sean.github.com/blog/2006/07/30/oscon-2006-wrap-up/"/>
    <updated>2006-07-30T00:59:00-04:00</updated>
    <id>http://sean.github.com/blog/2006/07/30/oscon-2006-wrap-up</id>
    <content type="html"><![CDATA[<p>Now that <a href="http://conferences.oreillynet.com/os2006/">OSCON</a> is over, I
like to make an attempt at distilling my thoughts on the conference.
Last year I wrote a lengthy
<a href="http://seanmountcastle.com/articles/2005/08/07/oscon-observations">post</a>
on my observations; this year it’s going to be short. I was a bit
disappointed by this year’s OSCON – not that I didn’t have a good time
and learn a bit – but the mood seemed more subdued, there wasn’t the
excitement that was felt last year. In fact, many of the attendees I
spoke to in the halls felt the difference too and several said that this
would be their last OSCON. I can’t pin it down to a single change in the
conference – in fact, prior to the conference I had expected it to be
even better than last year as I had so many conflicting sessions that I
wanted to attend. The absence of <a href="http://www.paulgraham.com/">Paul
Graham</a> at the Tuesday night keynotes was
disappointing but <a href="http://headrush.typepad.com/">Kathy Sierra</a> gave an
excellent talk. The quality of speakers was roughly the same as last
year and the topics were similar (lots of Perl, Python, Ruby, Ajax,
etc). The variety of keynotes was good, though last year I left many of
the keynotes feeling inspired and excited, this year I really didn’t
feel that. So on the surface, this year’s OSCON should’ve been just as
good as last year’s – but in some intangible way it wasn’t – if I didn’t
receive agreement on this from others, I would simply chock it up to my
imagination or melancholy. So 2006 might be the last year I attend OSCON
as well … I guess we’ll see what happens next year.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OSCON: Sessions Day Three]]></title>
    <link href="http://sean.github.com/blog/2006/07/28/oscon-sessions-day-three/"/>
    <updated>2006-07-28T00:53:00-04:00</updated>
    <id>http://sean.github.com/blog/2006/07/28/oscon-sessions-day-three</id>
    <content type="html"><![CDATA[<p>Below are my notes from the third and final day of sessions here at
<a href="http://conferences.oreillynet.com/os2006/">OSCON</a>. The talks I attended
were:</p>

<ul>
<li>Practical OpenID</li>
<li>Highly-technical Management of Software Development</li>
</ul>


<p>After the morning keynotes, I attended Practical OpenID, presented by
<a href="http://seanmountcastle.com/davidrecordon.com">David Recordon</a> and
<a href="http://brianellin.com">Brian Ellin</a>. They gave a quick overview of
authentication and then discussed how OpenID works:</p>

<ul>
<li>You obtain an OpenID from someplace like MyOpenID (linked below).</li>
<li>You add two lines of HTML to your site header â€“ to prove you own
that URL.</li>
<li>You then go to an OpenID enabled site and enter your URL.</li>
<li>The site goes to the URL you entered and determines the OpenID
server from the information in the page header</li>
<li>The web app then redirects you to the login page on the OpenID
server.</li>
<li>Once youâ€™ve authenticated yourself with your password, the browser
is redirected back to the web app with your credentials.</li>
</ul>


<p>Then Brian ran the Rails demo and showed how his Rails app was able to
authenticate through <a href="http://www.myopenid.com">MyOpenID</a> and redirect
back to his Rails app with additional registration information.</p>

<p>David also mentioned that there is a $5,000 bounty for open source apps
which integrate OpenID:
<a href="http://iwantmyopenid.org/bounty">iwantmyopenid.org</a>.</p>

<p>Next up was <a href="http://conferences.oreillynet.com/cs/os2006/view/e_sess/8694">Highly-technical Management of Software
Development</a>
by <a href="http://www.aleax.it">Alex Martelli</a> of Google. He started out by
listing the three legs of the software development stool:</p>

<ul>
<li>Right intention => strategic leadership</li>
<li>Right action => excellent developers</li>
<li>Right endeavor => effective highly-technical management</li>
</ul>


<p>He then asked a series of questions regarding these three pillars:</p>

<ul>
<li>What is great strategic leadership?

<ul>
<li>a strong vision of the business model</li>
<li>mutual trust, interaction and respect</li>
<li>courage, integrity, humility, etc</li>
</ul>


<p>They do their job well and <em>let</em> me to do mine.</p></li>
<li>What makes developers excellent?

<ul>
<li>great at design, coding, developing, testing, debugging, user
interface design, etc.</li>
<li>mutual trust, interaction and respect</li>
<li>courage, integrity, humility, etc.</li>
</ul>


<p>They do their job well and <em>enable</em> me to do mine.\
 Aside: How do you get excellent developers? Luck, choice or grow
them.</p></li>
<li>What is effective highly-technical management?

<ul>
<li>start with a manager whoâ€™s a technical peer of the developers</li>
<li>develop mutual trust, interaction and respect with the
developers</li>
<li>the manager deployes themself as a â€œwildcardâ€? technical
resource â€“ not for the â€œfunâ€? tasks, for the urgent ones
needing extra resourcesThere are usually three objections to
this:

<ul>
<li><p>What about Brooksâ€™ Law?</p>

<ul>
<li>â€œAdding resources to a late project makes it laterâ€?</li>
<li>Yes, but in that case itâ€™s due to the fact that the
new developer must get up to speed on the project</li>
<li>The highly-technical manager should already be up to
speed on the project â€“ no extra overhead, so Brooksâ€™
law doesnâ€™t apply</li>
</ul>
</li>
<li><p>Where does one find the time?</p>

<ul>
<li><strong>NOT</strong> in working long hours (aim for 40 a week).</li>
<li><strong>NOT</strong> by telecommuting (communication is the most
critical task and face-to-face communication is best)</li>
<li>Time management works (recommended <a href="http://www.amazon.com/gp/product/0596007833/sr=8-2/qid=1154131620/ref=pd_bbs_2/104-0491953-9680738?ie=UTF8">Time Management for
System
Administrators</a>
â€“ schedule 50% of your time each week for emergency
tasks or with filler that can easily be post-poned</li>
</ul>
</li>
<li><p>Shouldnâ€™t a manager always delegate?</p>

<ul>
<li>Yes, but delegation doesnâ€™t remove your responsibility
â€“ you need to stay up to speed on all of your projects</li>
<li>You should trust your people to do whatâ€™s right, but
you have to enable them to do it</li>
<li>Once they see your technical contributions are useful,
they will want you involved â€“ as long as youâ€™ll
<strong>never</strong> steal the credit</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>At the end of his presentation he mentioned that Joel Spolsky got it
right about scheduling â€“ a spreadsheet is all you need (Gantt/Pert
charts usually donâ€™t work). Use agile methodologies (agile planning,
TDD, refactoring/DRY, 40-hour week, ego-less programming, frequent
releases).</p>

<p>Alexâ€™s final message was to <strong>control your dependencies</strong> or they will
control you!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OSCON: Sessions Day Two]]></title>
    <link href="http://sean.github.com/blog/2006/07/27/oscon-sessions-day-two/"/>
    <updated>2006-07-27T23:08:00-04:00</updated>
    <id>http://sean.github.com/blog/2006/07/27/oscon-sessions-day-two</id>
    <content type="html"><![CDATA[<p>Below are my notes from the second day of sessions here at
<a href="http://conferences.oreillynet.com/os2006/">OSCON</a>. The talks I attended
were:</p>

<ul>
<li>Subversion Best Practices</li>
<li>haXe: A Cross-platform Web Language</li>
<li>Building DSLs in Ruby</li>
<li>Testing Rails Apps</li>
<li>When Interface Design Attacks!</li>
<li>Web Heresies: The Seaside Framework</li>
</ul>


<p>In the morning, I attended <a href="http://conferences.oreillynet.com/cs/os2006/view/e_sess/8671">Subversion Best
Practices</a>
by Ben Collins-Sussman and Brian Fitzpatrick. I donâ€™t see the slides
up yet at the <a href="http://subversion.tigris.org/">Subversion</a> site, but they
said that the slides would be posted. Several of the best practices they
covered were:</p>

<ul>
<li><p>Server Best Practices</p>

<ul>
<li>svnserve: good for simple setups</li>
<li>svn+ssh: great if you already depend on sshd</li>
<li>Apache: more points of integration, repos web browsing, network
share, etc.</li>
<li>Always use a single repository when you have shared users,
shared code, etc; except when you have radically different
access policies, radically different data types, etc.</li>
<li>Some nice repos browsing tools are:
<a href="http://www.viewvc.org/">ViewVC</a> and
<a href="http://trac.edgewall.org/">Trac</a></li>
<li><p>Hook scripts:</p>

<ul>
<li>pre-commit: donâ€™t try to modify the transaction, just fail
it if you need the code to be formatted, for example.
Mentioned case-insensitive.py.</li>
<li>post-commit: run it in the background so it doesnâ€™t hold
up the user. Mentioned mailer.py and CIA bot.</li>
</ul>
</li>
<li><p>Repos Maintenance:</p>

<ul>
<li>dump: slow, not for backups</li>
<li>hotcopy: does a cp -R, can be used for backups and then you
can rsync the copy, if needed</li>
</ul>
</li>
</ul>
</li>
<li><p>Client Best Practices</p>

<ul>
<li>commit often</li>
<li>commit small, discreet chunks (but <strong>donâ€™t</strong> commit individual
files)</li>
<li>have a consistent log message policy</li>
</ul>
</li>
<li><p>Misc Best Practices</p>

<ul>
<li>Use branches: you can have task branches, feature branches,
release branches, etc.</li>
<li>Merge tracking: must be done by humans currently, but in 1.5
there is real merge tracking.</li>
<li>Autoprops: take advantage of these, some examples are:
svn:mime-type, svn:eol-style, svn:needs-lock</li>
</ul>
</li>
</ul>


<p>Thankfully Nicolas Cannasseâ€™s talk entitled <a href="http://conferences.oreillynet.com/cs/os2006/view/e_sess/8600">haXe: A cross-platform
web
language</a>
was moved earlier (prior to this I had a triple-conflict this
afternoon). Nico appears to be an amazingly smart fellow and
<a href="http://www.haxe.org">haXe</a> along with the <a href="http://nekovm.org/">NekoVM</a>
(only 220KB!) look like very interesting technologies. He started with a
simple â€˜Hellow Worldâ€™ example in haXe which was then generated into
JavaScript, Flash and Neko â€“ that is the same source code can be
easily re-targeted to different â€˜platformsâ€™. At the end he showed
off <a href="http://en.dinoparc.com">Dinoparc</a> and Hammerfell, two Flash games
that were written using haXe. Nico also mentioned that someone is
writing a Ruby compiler which targets the NekoVM.</p>

<p>After lunch I attended <a href="http://www.nealford.com">Neal Fordâ€™s</a> Building
DSLs in Ruby. He showed off a simple calendaring DSL. His slides are
here and he followed them very closely so I donâ€™t have much
commentary. I guess the only way to get comfortable designing and
implementing DSLs in Ruby is to actually write them â€¦ Iâ€™m going to
have to pick some domain and just start.</p>

<p>Then <a href="http://www.pragmaticstudio.com/">Mike Clark</a> was up with <a href="http://conferences.oreillynet.com/cs/os2006/view/e_sess/8395">Testing
Rails
Apps</a> â€“
much of this was review for me, but I was looking forward to his
tips/tricks to make testing easier. Iâ€™m really trying hard to be a
â€œtest-firstâ€? developer but I get so excited writing new features
that I leave the tests for last (of course, this usually means that I
end-up refactoring the code I wrote based on the tests, which is a good
thing). Since his slides arenâ€™t up yet, Iâ€™ll post some of my notes.
Mikeâ€™s keypoint was that tests are insurance â€“ they ensure that
programming your app remains fun, so youâ€™re not scared of making
changes because you have a nice test suite which can quickly find out if
youâ€™ve broken something else with your change. Some of his tips are
below:</p>

<pre><code># if the product isn't valid, print out the errors
assert product.valid?, product.errors.full_messages

# checking uniqueness
assert_equal ActiveRecord::Errors.default_error_message[:taken],
product.errors.on(:title)

# for integration testing create a user object with method
# names that are in plain English
def regular_user
open_session do |user|
def goes_to_store
get :index
assert_response :success
end

def is_viewing_index
assert_template "index"
end

def buys_book
post :add_to_cart, :item =&gt; { :id =&gt; 1234 }
end

def checks_out
post :checkout, :payment_info =&gt; { ... }
end
end
end
</code></pre>

<p>Following the break, I attended <a href="http://conferences.oreillynet.com/cs/os2006/view/e_sess/8924">When Interface Design
Attacks!</a>
by <a href="http://www.slash7.com">Amy Hoy</a>. Her slides should be up on her
website soon but some of the key points were that interface involves:</p>

<ul>
<li>expectations (baggage)</li>
<li>interaction (usability)</li>
<li>behavior (your appâ€™s personality)</li>
</ul>


<p>Some of the principles she mentioned were:</p>

<ul>
<li>usersâ€™ brains are affected by literacy; they scan in predictable
patterns (reading right to left, top to bottom)</li>
<li>users adapt to web design (ignoring headers, sidebars, stuff below
the fold)</li>
<li>if it looks like an ad, itâ€™s ignored (or if itâ€™s a small bit of
content surrounded by ads, itâ€™s ignored)</li>
<li>users â€˜satisficeâ€™ or give up (they pick the closest thing to
what they were looking for)</li>
<li>30-40% of users have low literacy (reading blocks of text is
difficult for them â€“ the changes you make for these users also pay
off for those who donâ€™t have literacy issues)</li>
<li>There should be twice as many pixels above an object than below it</li>
<li>Labels should be above their input and labels should have the same
name/id as their corresponding input fields</li>
</ul>


<p>Amy then went through several examples from popular websites.</p>

<p>The last talk of the day was <a href="http://conferences.oreillynet.com/cs/os2006/view/e_sess/8942">Web Heresies: The Seaside
Framework</a>
by <a href="http://smallthought.com/avi/">Avi Bryant</a> â€“ basically it was
<a href="http://www.apple.com/webobjects/">WebObjects</a> meets
<a href="http://www.paulgraham.com/vwfaq.html">ViaWeb</a> (in
<a href="http://www.squeak.org/">Smalltalk</a>). The ideas behind
<a href="http://www.seaside.st/">Seaside</a> are quite cool, but having never used
Smalltalk and hating every IDE Iâ€™ve ever tried it just didnâ€™t appeal
to me. Technically, the continuation usage is incredible â€“ every time
you click a link a continuation is generated (complete call stack) so if
you go back youâ€™re old call stack is still there and you can then have
the function return a different value taking you some place else within
the web app. Avi doesnâ€™t like templates, he wants HTML to be back in
the domain of the developer and it should be generated from within the
web app â€“ the designer only gets to touch the CSS (see <a href="http://www.csszengarden.com/">CSS Zen
Garden</a> for examples of how this works).
To handle form fields, Seaside simply uses callbacks â€“ you place the
block of code in a callback right where the text field is generated,
this is what the code looks like:</p>

<pre><code>html form:
[html text: 'Name: '.
html textInputWithValue: person name callback: [:val | person name: val].
html break.
html submitButton]
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OSCON: Sessions Day One]]></title>
    <link href="http://sean.github.com/blog/2006/07/27/oscon-sessions-day-one/"/>
    <updated>2006-07-27T20:34:00-04:00</updated>
    <id>http://sean.github.com/blog/2006/07/27/oscon-sessions-day-one</id>
    <content type="html"><![CDATA[<p>Below are my notes from the first day of sessions here at
<a href="http://conferences.oreillynet.com/os2006/">OSCON</a>. The talks I attended
were:</p>

<ul>
<li>Using Ruby on Rails to Build a Massive Multiplayer Game</li>
<li>Easy AI with Python</li>
<li>Driving Rails Deep into the Back Office</li>
<li>Streamlined</li>
<li>Ruby for Java Programmers</li>
<li>Coding Wizard, Savvy Trader</li>
</ul>


<p>In the morning, I attended <a href="http://www.michaelbuffington.com/">Michael
Buffingtonâ€™s</a> talk on <a href="http://conferences.oreillynet.com/cs/os2006/view/e_sess/8390">â€œUsing
Ruby on Rails to Build a Massive Multiplayer
Gameâ€?</a>.
He gave a nice overview of the development of <a href="http://llor.nu">unroll</a>
discussing isometric art, game design and briefly mentioning
Ajax/JavaScript/script.aculo.us. Hopefully his slides will be available
online shortly. The code for unroll can be downloaded
<a href="http://dev.llor.nu">here</a>. At 11:35am, I was torn between <a href="http://clarkware.com/cgi/blosxom">Mike
Clarkâ€™s</a> <a href="http://conferences.oreillynet.com/cs/os2006/view/e_sess/8396">Deploying Rails Apps with
Capistrano</a>
and Raymond Hettingerâ€™s <a href="http://conferences.oreillynet.com/cs/os2006/view/e_sess/9577">Easy AI with
Python</a>.
Since Iâ€™ve already deployed a couple of Rails apps using Capistrano, I
decided to sneak into the Python camp (I ended up sitting right in front
of Guido). I found the presentation quite interesting and will be
looking into similar libraries for Ruby. Raymond covered the following
topics: neural networks for datamining, solving the mastermind game,
solving sudoku, a Bayesian classifer and, finally, a generic puzzle
solver. Though the slides do not appear to be online yet, the Python
code is available
<a href="http://aspn.activestate.com/ASPN/Cookbook/Python?author=178123">here</a>.
After lunch I attended <a href="http://www.jroller.com/page/obie">Obie
Fernandezâ€™s</a> <a href="http://conferences.oreillynet.com/cs/os2006/view/e_sess/8674">Driving Rails Deep
into the Back
Office</a>.
Obie discussed the PCS project for Barclays Bank in Willmington, DE that
Thoughtworks was involved in. He discussed the various ways in which to
get new technology into the very conservative back office of companies,
such as: Trojan horse (sneaking it in), the race (two parallel
development teams using different technologies), the pilot project, the
rescue (for a failed/failing project) and finally undercutting (but he
cautioned that this de-values the work youâ€™re doing). The three key
points of his talk were:</p>

<ol>
<li>Optimize and raise your level of abstraction (by creating custom
DSLs and capturing the requirements in Ruby)</li>
<li>Rails really breathes life into extreme programming (they had one
week iterations on their project)</li>
<li>Donâ€™t sweat performance and scaling (they had their custom DSL
generate SQL directly instead of Ruby to keep the performance up â€“
so you canâ€™t completely ignore performance issues, but theyâ€™re
usually not as bad as you think)</li>
</ol>


<p><a href="http://www.relevancellc.com">Stuart Halloway</a> demoed the
<a href="http://conferences.oreillynet.com/cs/os2006/view/e_sess/9535">Streamlined</a>
generator for Ruby on Rails â€˜backendâ€™ admin interfaces. Stuart
described Streamlined as:</p>

<ol>
<li>Product ready backend scaffolding</li>
<li>Generic enterprise CRUD</li>
<li>The simplicity of ActiveRecord brought to views and controllers</li>
</ol>


<p>Heâ€™s not going to put the material present online since it is all
basically available via the <a href="http://www.streamlinedframework.org/">Streamlined
blog</a>. Ugo Cei gave a talk
entitled <a href="http://conferences.oreillynet.com/cs/os2006/view/e_sess/8636">Ruby for Java
Programmers</a>
â€“ which confused many folks who thought it was an introduction to Ruby
for those coming from a Java programming background â€“ instead it
covered how to call Ruby from Java and how to call Java from Ruby. All
of the material is covered in his slides, which are available
<a href="http://www.sourcesense.com/transfer/ruby_for_java_programmers.pdf">here</a>.
At the end of his talk he demoâ€™ed Rails running inside of JRuby which
was pretty neat (though very slow and a bit buggy â€“ sometimes
controllers wouldnâ€™t respond). Since Iâ€™ve already written a C
extension for Ruby, I decided to attend a different kind of talk,
<a href="http://conferences.oreillynet.com/cs/os2006/view/e_sess/8755">Coding Wizard, Savvy
Trader</a> by
Kartik Subbarao of HP. It was a whirlwind talk covering stocks and
options trading and how to get access to financial information as well
as how to process it using Perl, GreaseMonkey, etc. When the slides are
posted, Iâ€™ll link back to them but here are several of the sites which
were recommended:</p>

<ul>
<li><a href="http://finance.yahoo.com">Yahoo! Finance</a></li>
<li><a href="http://www.stockcharts.com/education">StockCharts Learning Center</a></li>
<li><a href="http://www.cboe.com/LearnCenter">Chicago Board of Exchange Learning
Center</a></li>
<li><a href="http://www.optionsxpress.com">OptionsXpress</a></li>
<li><a href="http://www.wealthlab.com">WealthLab</a></li>
<li><a href="http://www.elitetrader.com">EliteTrader</a></li>
<li><a href="http://www.opentick.com">OpenTick</a></li>
<li><a href="http://www.stocktickr.com">StockTickr</a></li>
<li><a href="http://www.socialpicks.com">SocialPicks</a></li>
<li><a href="http://www.marketocracy.com">Marketocracy</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FOSCON II: The Ruby Rodeo]]></title>
    <link href="http://sean.github.com/blog/2006/07/27/foscon-ii-the-ruby-rodeo/"/>
    <updated>2006-07-27T01:19:22-04:00</updated>
    <id>http://sean.github.com/blog/2006/07/27/foscon-ii-the-ruby-rodeo</id>
    <content type="html"><![CDATA[<p>Tonight I was able to attend <a href="http://oscamp.org/FOSCON">FOSCON II</a> at
<a href="http://www.freegeek.org/">FreeGeek</a> (I wish theyâ€™d hold FOSCON at the
OCC so it wasnâ€™t such a hassle to get there and back â€“ but I will
say the volunteers who walked us down there and then drove us back did
make it easier). Follow the link below for brief summaries of the
presentations and links to them. First up was <a href="http://tech.rufy.com/">Lucas
Carlson</a> who spoke about <a href="http://rufy.com/distributed-programming/">distributed processing
using Rinda and DRb</a>. Lucas
showed how to setup a simple DRb server and run a client against it,
then he showed how to run a Rinda ring server. Once he got through the
basics he setup a server which parceled out ranges of numbers for us to
check for primes within â€“ several folks in the audience were able to
connect up and process jobs handed out by his prime finder server. Next
up was <a href="http://cyll.org/blog/tech">Topher Cyll</a> who gave a talk entitled
â€œA Ruby/DHTML Turn Based Strategy Gameâ€¦ in 20 Minutesâ€? â€“
unfortunately I donâ€™t see the slides online yet, but hereâ€™s a link
to his <a href="http://cyll.org/tbs.shtml">TBS gem with some exposition</a>. Topher
used his TBS gem to create a simple turn based strategy game in which
you control a cowboy by moving and attacking (there is another
â€˜evilâ€™ cowboy which you must defeat to win the game). Even though
the game is very simplistic it shows the potential of Rails, JSON and
DHTML/Ajax. Seeing this I was reminded of the talk I went to this
morning at OSCON about unroll (llor.nu) â€“ which Iâ€™ll write about
later as Iâ€™m wiped out and want to finish this FOSCON post before bed.
<a href="http://blog.zenspider.com/">Ryan Davis</a> from seattle.rb spoke about the
ruby2c project. The project appears to have many facets (more than my
tired brain can grok right now) but two key points I took away from
Ryanâ€™s talk were 1) ruby2c is about generating that subset of the Ruby
interpreter which needs to be in C, everything else should be written in
Ruby so that Ruby can bootstrap itself (like Lisp) and 2) as a result of
the work done on ruby2c, it was really easy for the team to create a
Ruby Obfuscator (a commercial product they are selling). <a href="http://www.nubyonrails.com/">Geoffrey
Grosenbach</a> of the Ruby on Rails podcast
spoke next â€“ it was quite eerie watching and listening to him as I
pictured him totally differently from hearing his podcasts. Geoffrey
discussed several short cuts, scripts, tools and Rake tasks he uses to
make his life easier when developing Ruby and Rails. He promised to post
the slides on his blog soon. Next <a href="http://onestepback.org/">Jim Weirich</a>
gave an abbreviated version of his OSCON talk, entitled <a href="http://conferences.oreillynet.com/cs/os2006/view/e_sess/8699">â€œTest-driven
Development Meets
Design-by-Contractâ€?</a>.
He mentioned the fact that Eiffel has built-in support for design by
contract and went through an example of a stack with the contracts for
pop and push. This is what makes duck typing work â€“ itâ€™s not just
that the method is there but that the contract is the same for those
methods. Wrapping up FOSCON II was <a href="http://www.slash7.com/">Amy Hoy</a>
with a talk entitled â€œCommunity Explosionâ€?. She spoke about the
problems that go with massive popularity (not everyone who wants to
being able to attend a particular conference) and in particular focused
on the problems surrounding newbies. See her earlier write-up on <a href="http://www.slash7.com/pages/vampires">Help
Vampires</a> for more detail about
the problem. But she was asking for help in setting up materials for
newbies so that they could increase their skills and not be such a drain
on the community. Ok, Iâ€™m wiped, I havenâ€™t been getting much sleep
since arriving at OSCON so no more posts until later tomorrow.</p>
]]></content>
  </entry>
  
</feed>
